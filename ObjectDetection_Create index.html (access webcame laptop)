<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mask Detection</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image"></script>
    <script src="https://cdn.jsdelivr.net/npm/mqtt/dist/mqtt.min.js"></script>
</head>
<body>
    <h1>Mask Detection with ThingsBoard</h1>
    <video id="webcam" autoplay playsinline width="640" height="480"></video>
    <p id="status">Loading model...</p>

    <script>
        const MODEL_URL = "YOUR_MODEL_URL"; // Ganti dengan link model
        let model, webcam, maxPredictions;

        // MQTT Setup
        const thingsboardHost = "YOUR_THINGSBOARD_SERVER"; // Ganti dengan server ThingsBoard
        const accessToken = "YOUR_ACCESS_TOKEN"; // Token perangkat dari ThingsBoard
        const client = mqtt.connect(`mqtt://${thingsboardHost}`, {
            username: accessToken
        });

        client.on("connect", () => console.log("Connected to ThingsBoard"));

        // Load model dan setup kamera
        async function init() {
            model = await tmImage.load(MODEL_URL + "model.json", MODEL_URL + "metadata.json");
            maxPredictions = model.getTotalClasses();
            webcam = new tmImage.Webcam(640, 480, true);
            await webcam.setup();
            await webcam.play();
            document.getElementById("webcam").appendChild(webcam.canvas);
            window.requestAnimationFrame(loop);
            document.getElementById("status").innerText = "Model loaded!";
        }

        async function loop() {
            webcam.update();
            await predict();
            window.requestAnimationFrame(loop);
        }

        async function predict() {
            const predictions = await model.predict(webcam.canvas);
            const result = predictions.reduce((a, b) => (a.probability > b.probability ? a : b));

            document.getElementById("status").innerText = `${result.className}: ${(result.probability * 100).toFixed(2)}%`;

            // Kirim ke ThingsBoard jika confident > 90%
            if (result.probability > 0.9) {
                const payload = JSON.stringify({ "Mask_Status": result.className });
                client.publish("v1/devices/me/telemetry", payload);
            }
        }

        init();
    </script>
</body>
</html>
