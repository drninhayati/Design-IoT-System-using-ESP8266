#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "Your_SSID";            // Ganti dengan SSID WiFi Anda
const char* password = "Your_PASSWORD";    // Ganti dengan Password WiFi Anda

// ThingsBoard MQTT Server
const char* mqtt_server = "Your_ThingsBoard_Server"; // Alamat IP ThingsBoard
const char* access_token = "Your_Access_Token";      // Token dari ThingsBoard

// Inisialisasi klien WiFi dan MQTT
WiFiClient espClient;
PubSubClient client(espClient);

// Pin untuk LED
const int ledPin = D1; // GPIO5 (D1 di NodeMCU)

void setup() {
    // Inisialisasi Serial Monitor
    Serial.begin(115200);

    // Setup pin LED
    pinMode(ledPin, OUTPUT);
    digitalWrite(ledPin, LOW); // LED mati di awal

    // Koneksi ke jaringan WiFi
    Serial.println("Connecting to WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi connected!");

    // Menampilkan IP Address ESP8266
    Serial.print("ESP8266 IP Address: ");
    Serial.println(WiFi.localIP());

    // Koneksi ke MQTT ThingsBoard
    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);

    reconnect();
}

// Callback untuk menerima pesan MQTT
void callback(char* topic, byte* payload, unsigned int length) {
    payload[length] = '\0'; // Tambahkan null terminator
    String message = String((char*)payload);
    Serial.println("Received message: " + message);

    // Cek status "With Mask" atau "Without Mask" dan kontrol LED
    if (message.indexOf("With Mask") != -1) {
        digitalWrite(ledPin, HIGH); // Nyalakan LED
        Serial.println("LED ON: With Mask detected!");
    } else {
        digitalWrite(ledPin, LOW); // Matikan LED
        Serial.println("LED OFF: Without Mask detected!");
    }
}

// Reconnect ke server MQTT
void reconnect() {
    while (!client.connected()) {
        Serial.print("Connecting to ThingsBoard MQTT...");
        if (client.connect("ESP8266Client", access_token, NULL)) {
            Serial.println("connected!");
            client.subscribe("v1/devices/me/telemetry"); // Topik untuk menerima data
            Serial.println("Subscribed to telemetry topic.");
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" retrying in 5 seconds...");
            delay(5000);
        }
    }
}

void loop() {
    // Jaga koneksi MQTT tetap aktif
    if (!client.connected()) {
        reconnect();
    }
    client.loop(); // Proses MQTT
}
